version: '3.8'

x-DbLoggin:
  environment: &postgres-login # the POSTGRES user master password
    POSTGRES_PASSWORD: '${POSTGRES_MASTER_PASSWORD}'

    USER_USERNAME: '${POSTGRES_USER_USERNAME}'
    USER_DB_NAME: '${POSTGRES_USER_DB}'
    USER_PASSWORD: '${POSTGRES_USER_PASSWORD}'
    POSTGRES_IP: postgres_db
    POSTGRES_PORT: ${POSTGRES_PORT}
    SQLURL: 'jdbc:postgresql://${POSTGRES_IP}:5432/${POSTGRES_USER_DB}'
  networks: &postgres-ip
    ipv4_address: '${POSTGRES_IP}'

services:
  postgres_db:
    image: postgres

    environment:
      <<: *postgres-login
      PGDATA: '/var/lib/postgresql/data/pgdata'

    networks:
      local_network: *postgres-ip

    volumes:
      - type: volume
        source: postgres_db
        target: /var/lib/postgresql/data

      - type: bind
        source: ./docker_files/db_init
        target: /docker-entrypoint-initdb.d

    restart: unless-stopped

  web_server:
    build:
      context: ./web/
      dockerfile: ./api/Dockerfile

    environment:
      <<: *postgres-login
      JWT_SECRET: ${JWT_SECRET}
      API_PORT: ${API_PORT}

    volumes:
      - type: volume
        source: fractal_thumbnail_images
        target: /fractal_thumbnail_images
      - type: bind
        source: $PWD/web/api/
        target: /usr/src/app
      - type: volume
        source: node_modules
        target: /usr/src/app/node_modules

    networks:
      local_network:
        ipv4_address: '${WEBSERVER_IP}'
    depends_on:
      - server
    ports:
      - '9988:8080'
    restart: unless-stopped

  server:
    build:
      context: ./server
      dockerfile: Dockerfile

    environment:
      <<: *postgres-login
      NODE_URL: '${NODE_URL}'

    volumes:
      - type: volume
        source: fractal_thumbnail_images
        target: /fractal_thumbnail_images
      - type: volume
        source: maven_data
        target: /root/.m2

    networks:
      local_network:
      frontend:
    ports:
      - '9876:9876'

    depends_on:
      - postgres_db

    restart: unless-stopped

  # https://github.com/mikael2/payara-postgres-nginx/
  nginx:
    container_name: nginx

    build:
      context: ./docker_files/nginx_certbot
      dockerfile: Dockerfile

    volumes:
      - type: volume
        source: nginx_data
        target: /etc/letsencrypt
      - type: bind
        source: /web/frontend
        target: /www/fractal/

    env_file:
      - ./config_files/nginx_cerbot.env

    environment:
      DOMAIN: '${API_DOMAIN}'
      LE_EMAIL: '${MAIL_USERNAME}'
    logging:
      options:
        max-size: '50m'
        max-file: '3'

    ports:
      - '80:80'
      - '443:443'

    networks:
      frontend:
      local_network:

    depends_on:
      - web_server

    restart: unless-stopped

networks:
  local_network:
    external: false
    ipam:
      driver: default
      config:
        - subnet: 10.0.0.0/8

  frontend:

volumes:
  # posgres db
  postgres_db:

  # thumbnail images
  fractal_thumbnail_images:

  maven_data:

  node_modules:

  nginx_data:
